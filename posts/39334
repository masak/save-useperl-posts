<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="shortcut icon" href="//use.perl.org/favicon.ico">

<title>Journal of masak (6289)</title>

<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/base.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/comments.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/useperl.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="print" href="//images.use.perl.org/print.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="handheld" href="//images.use.perl.org/handheld.css?T_2_5_0_235">

<script src="//images.use.perl.org/jquery/jquery-1.2.6.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/jquery/jquery.metadata.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/slash.util.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/jquery/jquery.slashdot.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/yahoo.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/dom.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/event.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/dragdrop.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/animation.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/calendar.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/sd_calendar.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/slash.article-info.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/tag-ui.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/common.js?T_2_5_0_235" type="text/javascript"></script>

<!-- start template: ID 121, header;misc;default -->

<link rel="top"       title="All the Perl that's Practical to Extract and Report" href="//use.perl.org/" >
<link rel="search"    title="Search use Perl" href="//use.perl.org/search.pl">
<link rel="author"    title="masak" href="//use.perl.org/~masak/">
<link rel="alternate" title="masak's Journal RSS" href="http://use.perl.org/~masak/journal/rss" type="application/rss+xml">
<link rel="alternate" title="masak's Friends' Journals RSS" href="http://use.perl.org/~masak/journal/friends/rss" type="application/rss+xml">
<link rel="alternate" title="Most Recent Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="Most Active Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;type=count&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="Most Befriended Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;type=friends&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="use Perl RSS" href="//use.perl.org/index.rss" type="application/rss+xml">
</head>
<body class="useperlorg">
<div id="top_parent"></div>

<div id="jump">
	<a href="#main-articles">Stories</a>
	<br>
	<a href="#blocks">Slash Boxes</a>
	<br>
	<a href="#comments">Comments</a>
</div>
<div class="ad1">

</div>
<div id="frame">

<!-- UsePerl Ad Start -->
<div class="ad1"><!-- ad position 1 -->
<div id="fad1" style="text-align:center">
<!-- DoubleClick Ad Tag 1 -->
<script type="text/javascript">
	dfp_ord=Math.random()*10000000000000000;
	dfp_tile = 1;

	document.write('<script type="text/javascript" src="http://ad.doubleclick.net/adj/ostg.useperl/mainpage_p1_leader;pg=index;logged_in=0;tile='+dfp_tile+';ord='+dfp_ord+'?"><\/script>');
	dfp_tile++;
</script>
</div>
<!-- End DoubleClick Ad Tag 1 --></div>
<!-- UsePerl Ad End -->

	<div id="topnav">
		<div id="logo">
			<h1>
				<a href="//use.perl.org">use Perl</a>
			</h1>
		</div>
                <div class="search">
			<form method="get" action="//use.perl.org/search.pl">
				<fieldset>
					<legend></legend>
					<label>Search <strong>use Perl</strong></label>
					<input type="text" name="query" value="" size="20">
					<input type="submit" value="Go" class="button">
				</fieldset>
			</form>
		</div>
	</div>
	<div id="slogan">
		<h2>
			All the Perl that's Practical to Extract and Report
		</h2>
	</div>
	<div id="journalnav">
		<div id="links">
			

<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="navigation-title">
		<h4>
			Navigation
		</h4>
	</div>
	<div class="content" id="navigation-content">
		<ul>
	<li class="begin">
		<a href="//use.perl.org/faq.shtml">FAQ</a>
	</li>
	<li>
		<a href="//use.perl.org/about.shtml">About</a>
        </li>
        <li>
		<a href="//use.perl.org/submit.pl">Submit Story</a>
        </li>
        <li>
		<a href="//use.perl.org/search.pl">Older Stories</a>
        </li>
        <li>	
		<a href="//use.perl.org/topics.shtml">Topics</a>
        </li>
        <li>
		<a href="//use.perl.org/pollBooth.pl">Polls</a>
        </li>
        <li>
		<a href="//use.perl.org/journal.pl">Journals</a>
        </li>
        <li>
		<a href="//use.perl.org/authors.pl">Authors</a>
        </li>
        <li>
		<a href="//use.perl.org/modulelist/">New Modules</a>
        </li>
        <li>
		<a href="//use.perl.org/users.pl?op=edithome">Preferences</a>

        </li>
</ul>
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->


		</div>
	</div>
	<div id="contents">
		
		<div id="journal">

<!-- end template: ID 121, header;misc;default -->



<!-- start template: ID 55, journalhead;journal;default -->

<div id="slashboxes">

<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="userlogin-title">
		<h4>
			use Perl Log In
		</h4>
	</div>
	<div class="content" id="userlogin-content">
		
			<form action="//use.perl.org/login.pl" method="post">
<fieldset>
	<legend>Log In</legend>
	<label>
		Nickname
	</label>
	<input type="text" name="unickname" size="20" value="">
	<label>
		Password
	</label>
	<input type="hidden" name="returnto" value="//use.perl.org/">
	<input type="hidden" name="op" value="userlogin">
	<input type="password" name="upasswd" size="20">
	<label class="checkbox">
		<input type="checkbox" name="login_temp" value="yes">
		Public Terminal
	</label>
	<input type="submit" name="userlogin" value="Log in" class="button">
	</fieldset>
</form>
<p>
	[ <b>
		<a href="//use.perl.org/login.pl?op=newuserform">
			Create a new account
		</a>
	</b> ]
</p>
		
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->



<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="user-info-title">
		<h4>
			masak (6289)
		</h4>
	</div>
	<div class="content" id="user-info-content">
		<a href="//use.perl.org/~masak/">masak</a> <br>&nbsp;&nbsp;(email not shown publicly)<br><a href="http://masak.org/carl" rel="nofollow">http://masak.org/carl</a><br><hr>Been programming Perl since 2001. Found Perl 6 somewhere around 2004, and fell in love. Now developing November (a Perl 6 wiki), Druid (a Perl 6 board game), pls (a Perl 6 project installer), GGE (a regex engine), and Yapsi (a Perl 6 implementation). Heavy user of and irregular committer to Rakudo.
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->


</div>
<div id="users-blocks">


<!-- start template: ID 376, tabbedmenu;misc;default -->



<!-- end template: ID 376, tabbedmenu;misc;default -->

<div class="generaltitle" >
	<div class="title">
		<h3 >
			<a href="//use.perl.org/~masak/journal/">Journal</a> of <a href="//use.perl.org/~masak/">masak</a> (6289)
			
		</h3>
	</div>
</div>


<div id="usermenu">
<ul class="menu">
<li><span class="begin"><a href="//use.perl.org/~masak/" class="begin">Info</a></span></li><li class="selected"><b><a href="//use.perl.org/~masak/journal/">Journal</a></b></li><li><a href="//use.perl.org/~masak/firehose/">Firehose</a></li><li><a href="//use.perl.org/~masak/friends/">Friends</a></li><li><a href="//use.perl.org/~masak/fans/">Fans</a></li><li><a href="//use.perl.org/~masak/foes/">Foes</a></li><li><a href="//use.perl.org/~masak/freaks/">Freaks</a></li><li><a href="//use.perl.org/~masak/tags/">Tags</a></li><li><a href="//use.perl.org/~masak/bookmarks/" class="end">Bookmarks</a></li>
</ul>
</div><div class="generalbody">

<!-- start template: ID 376, tabbedmenu;misc;default -->

<ul class="menu">
<li><span class="begin"><a href="//use.perl.org/journal.pl?op=top" class="begin">Top&nbsp;10</a></span></li><li><a href="//use.perl.org/journal.pl?op=friends" class="end">Friend's&nbsp;Journals</a></li>
</ul>

<!-- end template: ID 376, tabbedmenu;misc;default -->

<!-- end template: ID 55, journalhead;journal;default -->



<!-- start template: ID 65, slashdot;journal;default -->

<div id="journalslashdot">
    
	<div class="journaldate">Wednesday July 22, 2009</div>
	
	<div class="details">05:22 PM</div>
	<div class="title">
		<h3>Three things in Perl 6 that aren't so great</h3>
	</div>
	<div class="adminoptions">
		[

			<a href="//use.perl.org/~masak/journal/39334">#39334</a>
		]
	</div>

	<div class="intro"><p>I keep repeating how great Perl 6 is, because it is. But there are things I wish were different, and that I feel are accidents of history. Maybe they will change before Christmas rolls around, maybe not. But at least to my mind, they stand out as <em>emergent mistakes</em>, good features that combine to make something pretty bad.</p><p>Here they are:</p><ul>
  <li>Methods and Pod</li><li>Form syntax and string interpolation</li><li>Comments in the beginning of lines</li></ul><p>Below, I'll go through each problem in detail.</p><p> <b>Methods and Pod</b> </p><p>Perl 6 has two ways of declaring package-like entities such as classes, roles and modules. One way is familiar from Perl 5, and looks like a single statement:</p><blockquote><div><p> <tt>class Austria;<br> <br># code here</tt></p></div> </blockquote><p>The other is familiar from some other languages, and looks like a block:</p><blockquote><div><p> <tt>class Austria {<br>&nbsp; &nbsp;# code here<br>}</tt></p></div> </blockquote><p>For the purposes of this blog post, let's call these the <em>statement form</em> and <em>block form</em>, respectively.</p><p>The block form is supposed to be the general one, and you can tell from the spec because that's the one that doesn't have any restrictions to it. The statement form is restricted so that it may only occur once in a file, preferably (one might assume) somewhere at the top. In practice, this means that if you have one file with several classes in it, you'll have to use the block form. That's OK, because people like the block form anyway; that's the one they tend to use when no-one tells them not to.</p><p>Now, enter <a href="http://perlcabal.org/syn/S26.html" rel="nofollow">Pod</a>. Just like in Perl 5, the Pod directives are written on the leftmost column of the file, no exceptions. This has to do with parsing and stuff; it should be really easy to tell what's a Pod comment and what isn't. But look what happens: people will tend to use the block form for their classes, they will want to document them with Pod, and the result &#8212; indented methods and non-indented Pod &#8212; will be too hideously ugly for the poor Perl 6 programmer to bear. So they will have to use the more restricted statement form. They will cry a little, because they like the block form. But in the end, they will switch back to the statement form, because the alternative will be too ugly to think about.</p><p>There hasn't been much of an uproar about this, because people haven't started Pod-documenting their methods in earnest yet. I did it with the Druid classes, and went through all the above stages: shocked realization, sadness, and then switching to the statement form on a massive scale, at least if they decide to keep their method Pod.</p><p>We never had this problem in Perl 5, because Perl 5 doesn't have the block form. We haven't started having the problem in Perl 6, because Pod is in <a href="http://use.perl.org/~masak/journal/38644" rel="nofollow">a state of limbo</a>, and people don't really know how to use it to document their methods anyway. But Pod and the block form for declaring classes (and stuff) don't mix well.</p><p> <b>Form syntax and string interpolation</b> </p><p> <a href="http://dev.perl.org/perl6/doc/design/exe/E07.html" rel="nofollow">E07</a> was written long ago, in Internet years. Some time after that, the string interpolation changed, and <code>{...}</code> was appropriated to mean "this part of the string isn't part of the string".</p><p>So people will be bitten every time they use an interpolating string with the <code>form</code> function. This error will be caught as a syntax error at compile time, so it's not a critical flaw, just bloody annoying.</p><p>Matt-W++ is still building <a href="http://github.com/mattw/form/" rel="nofollow">Form.pm</a> for Perl 6, so this also hasn't become a real annoyance for people yet. But there's a corresponding thing with <code>eval</code> and interpolating strings that bites people all the time.</p><p>It's kinda double-edged: we all like <code>{...}</code> in interpolated strings, but it keeps coming back and biting us too, because we forget it's special syntax.</p><p> <b>Comments in the beginning of lines</b> </p><p>There was a long bikeshedding discussion about this some years ago. Perl 6 introduces <em>embedded comments</em>, comments which start with a <code>#</code> and then a bracketing character, with all the Unicode smorgasboard to choose from.</p><p>However, it was soon realized that people who commented things out by putting <code>#</code>s at the absolute beginning of lines might accidentally create embedded comments by placing their <code>#</code> next to a curly brace or a parenthesis or a bracket. So anything that looks like an embedded comment at the beginning of a line is now treated as a syntax error.</p><p>At this point I would like to add that this does not bother me very much. I have come to terms with this particular oddity of the language. But it took me a while, and I can still feel a lingering sense of dissatisfaction with Perl 6 causing me to (*gasp*) <em>change a habit</em>, and one I don't think is a particularly bad one to begin with. Perl is supposed to accomodate a large range of common programming styles, and quickly commenting out some lines by prefixing them with <code>#</code>s is pretty common.</p><p>I've now learned to put <code>##</code> at the beginning of lines I want to comment out instead of just <code>#</code>. This takes care of any unintended embedded comments. So things are fine over here; I'm just worried that a lot of people will feel significant pain when they go through the same process of realization.</p><p>I'm not sure embedded comments are all that useful. I seem to find a use for them sometimes in one-liners, but very seldom in other circumstances. Are they really worth the special-casing of a common development technique?</p><p> <b>In conclusion</b> </p><p>Perl 6 (the spec) is lovely, except in spots. It also isn't finished yet. I like the fact that I can complain like this in a blog post, and smart people will pick my arguments apart, or mull over them and propose improvements for the synopses. All the above three misfeatures are hard to solve because they arise as consequences of features we want, and so fixing the emergent problems would mean going back and changing the features somehow. That's hard.</p><p>As usual, feel free to comment. I'm the only one I know who has been severely bitten by the first and the last things, but I'd love to hear if others have too, and how they felt about it.</p></div>
	
    

	<div class="journalpage">
		
		<br>
		<a href="//use.perl.org/journal.pl?op=list&amp;uid=6289" class="all">List all Journal entries</a>
	</div>
</div>

<!-- end template: ID 65, slashdot;journal;default -->

</div></div>

<!-- start template: ID 159, printCommentsMain;misc;default -->

<a name="acomments"></a>
<div class="commentwrap" id="commentwrap">

<div class="commentBox" style="font-size: 120%">
	<div>
<span class="escape-link"><a href="//use.perl.org/~masak/journal/39334" title="Back to Article - Three things in Perl 6 that aren't so great">Three things in Perl 6 that aren't so great</a></span>
<span class="commentBoxLinks"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_d"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=43438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></span>
	</div>
</div>

	<div class="commentBoxForm" id="commentControlBox">
<div></div>
	<div class="commentBox">
		<small>
		<b>The Fine Print:</b> The following comments are owned by whoever posted them.  We are not responsible for them in any way.
		</small>
<noscript><br><small>Without JavaScript enabled, you might want to
use <a href="//use.perl.org/comments.pl?sid=43438&amp;threshold=0&amp;commentsort=0&amp;mode=thread&amp;no_d2=1">the classic discussion system</a> instead.  If you <a href="//use.perl.org/login.pl">login</a>, you can remember this preference.
</small></noscript>
	</div>
	</div>
	
		<div id="d2out" class="horizontal">
		<div id="d2act" class="hide">
		<div class="loki" id="gods">
		<div class="block">
			<div class="title">

				<h4>
				
					<span class="h-inline">
					<a href="//use.perl.org/~masak/journal/39334" title="Back to Article - Three things in Perl 6 that aren't so great">Three things in Perl 6 that aren't so great</a></span>
					<span class="titlecount"><a href="//use.perl.org/~masak/journal/39334#topcomment" title="Back to Top Comment - Three things in Perl 6 that aren't so great"><span id="titlecountnum">16</span>&nbsp;Comments</a></span>
				
		<span class="ccw-header-links"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_b"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=43438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></span>
		<span id="d2toggle" title="Toggle window location" onclick="D2.toggleDisplayOptions()" class="close">/</span>
				</h4>
			</div>
		</div>
<script type="text/javascript">
gCommentControlWidget = null;

YAHOO.slashdot.ThresholdApp = function() {
  return {
    init: function() {
      gCommentControlWidget = new YAHOO.slashdot.ThresholdWidget('X');
      gCommentControlWidget.setTHT(D2.user_threshold(), D2.user_highlightthresh());
      D2.updateTotals();
    }
  };
}();

YAHOO.util.Event.addListener(window, "load", YAHOO.slashdot.ThresholdApp.init);
</script>
		<div id="bones">
      <div id="ccw">
        <div id="ccw-body" class="ccw-core">
          <div id="ccw-panel-container" class="ccw-core">
            <div id="ccw-full-panel" class="ccw-panel">
              <div class="ccw-panel-border"></div>
              <div id="ccw-full-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-full-count-text" class="ccw-count-text"><span id="currentFull"></span><span id="ccw-full-phrase">&nbsp;Full</span></span>
              </div>
            </div>
            <div id="ccw-abbr-panel" class="ccw-panel">
              <div class="ccw-panel-border"></div>
              <div id="ccw-abbr-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-abbr-count-text" class="ccw-count-text"><span id="currentOneline"></span><span id="ccw-abbr-phrase">&nbsp;Abbreviated</span></span>
              </div>
            </div>
            <div id="ccw-hide-panel" class="ccw-panel">
              <div id="ccw-hide-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-hide-count-text" class="ccw-count-text"><span id="currentHidden"></span><span id="ccw-hide-phrase">&nbsp;Hidden</span></span>
              </div>
            </div>
          </div>
    
          <div id="ccw-control" class="ccw-core">
            <div id="ccw-centering-rail" class="ccw-core">
              <div id="ccw-hide-bar-pos" class="ccw-core-pos">
                <div id="ccw-hide-bar" class="ccw-bar">
                  <div id="ccw-hide-bar-tab" class="ccw-bar-tab"></div>
                  <div id="ccw-hide-bar-upzone" class="ccw-upzone" onclick="gCommentControlWidget.stepTHT(HIDE_BAR, +1)"></div>
                  <div id="ccw-hide-bar-downzone" class="ccw-downzone" onclick="gCommentControlWidget.stepTHT(HIDE_BAR, -1)"></div>
                </div>
              </div>
              <div id="ccw-abbr-bar-pos" class="ccw-core-pos">
                <div id="ccw-abbr-bar" class="ccw-bar">
                  <div id="ccw-abbr-bar-tab" class="ccw-bar-tab"></div>
                  <div id="ccw-abbr-bar-upzone" class="ccw-upzone" onclick="gCommentControlWidget.stepTHT(ABBR_BAR, +1)"></div>
                  <div id="ccw-abbr-bar-downzone" class="ccw-downzone" onclick="gCommentControlWidget.stepTHT(ABBR_BAR, -1)"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
		</div>
		<div class="commentControlFooter"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_c"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=43438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a><div id="login_cover" style="display:none" onclick="hide_login_box()"></div>
<div id="login_box" style="display:none">
<div class="generaltitle" >
	<div class="title">
		<h3 >
			Please Log In to Continue<a href="#" onclick="hide_login_box(); return false" class="close" title="Close this box"><img id="login_box_close" src="//images.use.perl.org/sic_close.png" alt="Close"></a>
			
		</h3>
	</div>
</div>
<div id="login_box_content">
<form action="//use.perl.org/login.pl" method="post">
<fieldset>
	<legend>Log In</legend>
	<label>
		Nickname
	</label>
	<input type="text" name="unickname" size="20" value="">
	<label>
		Password
	</label>
	<input type="hidden" name="returnto" value="//use.perl.org/comments.pl?sid=43438">
	<input type="hidden" name="op" value="userlogin">
	<input type="password" name="upasswd" size="20">
	<label class="checkbox">
		<input type="checkbox" name="login_temp" value="yes">
		Public Terminal
	</label>
	<input type="submit" name="userlogin" value="Log in" class="button">
	</fieldset>
</form>
<p>
	[ <b>
		<a href="//use.perl.org/login.pl?op=newuserform">
			Create a new account
		</a>
	</b> ]
</p>
</div></div>
<script type="text/javascript">logged_in = 0</script></div>
		<div id="commentControlBoxStatus" class="hide"><b>Loading... please wait.</b></div>
	</div>
</div>
		</div>
	
</div>
<a name="topcomment"></a>

<!-- end template: ID 159, printCommentsMain;misc;default -->



<!-- start template: ID 157, printCommComments;misc;default -->

<script src="//images.use.perl.org/comments.js?T_2_5_0_235" type="text/javascript"></script>
	<script type="text/javascript">
<!--
	D2.d2_keybindings_disable()[191] = 1;
	window.onscroll = D2.d2act;
	D2.boxStatus(1);
D2.comments({ 69585: { uid: 276, pid: 69583, subject: "Re:S02#Whitespace_and_Comments", read: 0, points: 2, kids: [  ], opid: 69583 }, 69958: { uid: 9361, pid: 69686, subject: "Re:The root problem is interspersing code with POD", read: 0, points: 1, kids: [  ], opid: 69686 }, 69573: { uid: 1569, pid: 0, read: 0, points: 1, kids: [ 69580 ], opid: 0 }, 69686: { uid: 8027, pid: 69593, subject: "Re:The root problem is interspersing code with POD", read: 0, points: 1, kids: [ 69958 ], opid: 69593 }, 69593: { uid: 998, pid: 0, read: 0, points: 1, kids: [ 69613, 69629, 69686 ], opid: 0 }, 69631: { uid: 3851, pid: 69629, subject: "Re:The root problem is interspersing code with POD", read: 0, points: 1, kids: [  ], opid: 69629 }, 69579: { uid: 6289, pid: 69572, subject: "Re:Methods and Pod not actual problem", read: 0, points: 1, kids: [  ], opid: 69572 }, 69583: { uid: 8218, pid: 0, read: 0, points: 1, kids: [ 69584, 69585 ], opid: 0 }, 69595: { uid: 6289, pid: 69594, subject: "Re:Methods and Pod not actual problem", read: 0, points: 1, kids: [  ], opid: 69594 }, 69584: { uid: 6289, pid: 69583, subject: "Re:S02#Whitespace_and_Comments", read: 0, points: 1, kids: [  ], opid: 69583 }, 69594: { uid: 2709, pid: 69572, subject: "Re:Methods and Pod not actual problem", read: 0, points: 2, kids: [ 69595, 69607 ], opid: 69572 }, 69629: { uid: 8678, pid: 69593, subject: "Re:The root problem is interspersing code with POD", read: 0, points: 1, kids: [ 69631 ], opid: 69593 }, 69613: { uid: 983, pid: 69593, subject: "Re:The root problem is interspersing code with POD", read: 0, points: 1, kids: [  ], opid: 69593 }, 69580: { uid: 6289, pid: 69573, subject: "Re:MooseX::Declare has a similar problem with pod", read: 0, points: 1, kids: [  ], opid: 69573 }, 69572: { uid: 9318, pid: 0, read: 0, points: 1, kids: [ 69579, 69594 ], opid: 0 }, 69607: { uid: 9318, pid: 69594, subject: "Re:Methods and Pod not actual problem", read: 0, points: 1, kids: [  ], opid: 69594 } });

D2.thresh_totals({6:{6:{1:16,3:0,2:0}},4:{6:{1:16,3:0,2:0},4:{1:16,3:0,2:0},5:{1:16,3:0,2:0}},1:{6:{1:0,3:0,2:16},4:{1:0,3:0,2:16},1:{1:0,3:16,2:0},3:{1:0,3:0,2:16},2:{1:0,3:6,2:10},5:{1:0,3:0,2:16}},3:{6:{1:16,3:0,2:0},4:{1:16,3:0,2:0},3:{1:16,3:0,2:0},5:{1:16,3:0,2:0}},0:{6:{1:0,3:0,2:16},4:{1:0,3:0,2:16},1:{1:0,3:16,2:0},3:{1:0,3:0,2:16},0:{1:0,3:16,2:0},2:{1:0,3:6,2:10},5:{1:0,3:0,2:16}},2:{6:{1:14,3:0,2:2},4:{1:14,3:0,2:2},3:{1:14,3:0,2:2},2:{1:14,3:2,2:0},5:{1:14,3:0,2:2}},5:{6:{1:16,3:0,2:0},5:{1:16,3:0,2:0}},"-1":{6:{1:0,3:0,2:16},4:{1:0,3:0,2:16},1:{1:0,3:16,2:0},3:{1:0,3:0,2:16},0:{1:0,3:16,2:0},2:{1:0,3:6,2:10},5:{1:0,3:0,2:16},"-1":{1:0,3:16,2:0}}});

D2.root_comment(0);
D2.root_comments([69572,69573,69583,69593]);
D2.root_comments_hash({69593:1,69572:1,69583:1,69573:1});

D2.d2_comment_order(0);
D2.user_uid(7);
D2.user_is_anon(1);
D2.user_is_admin(0);
D2.user_is_subscriber(0);
D2.user_threshold(0);
D2.user_highlightthresh(4);
D2.user_d2asp(0);

D2.discussion_id(43438);

D2.d2_seen('69572,1,6,1,3,1,1,8,1,1,12,6,16,2,55,272');
D2.more_comments_num(0);


//-->
	</script>




	
	
	
	
		<ul id="commentlisting" class="d2">
			<li id="tree_69572" class="comment">
<div id="comment_status_69572" class="commentstatus"></div>
<div id="comment_69572" class="oneline">

	<div id="comment_top_69572" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69572" name="comment_link_69572" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69572" onclick="return D2.setFocusComment(69572)">Methods and Pod not actual problem</a>
			
			<span id="comment_score_69572" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69572); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~duncand/">duncand (9318)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69572"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69572"><p>There isn't actually a problem in the interaction of methods and pod, when you consider that the "problem" is based on false assumptions.</p><p>One false assumption is that methods have to be indented when you have a block class in order to be pretty; I disagree, and methods can be flush left just like their pod, so all pretty so far.</p><p>Another false assumption is that you can't have block classes in Perl 5, and so what worked for Perl 5 can't work for Perl 6; in fact you *can* have block classes in Perl 5, and I hav<span class="substr"> </span></p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69572"></div>

</div>


<div id="replyto_69572"></div>

<ul id="group_69572">
	<li id="hiddens_69572" class="hide"></li>
</ul><ul id="commtree_69572"><li id="tree_69579" class="comment">
<div id="comment_status_69579" class="commentstatus"></div>
<div id="comment_69579" class="oneline">

	<div id="comment_top_69579" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69579" name="comment_link_69579" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69579" onclick="return D2.setFocusComment(69579)">Re:</a>
			
			<span id="comment_score_69579" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69579); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69579"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69579"><p><div class="quote"><p>
There isn't actually a problem in the interaction of methods and pod, when you consider that the "problem" is based on false assumptions.</p><p>One false assumption is that methods have to be indented when you have a block class in order to be pretty; I disagree, and methods can be flush left just like their pod, so all pretty so far.</p></div><p>I had this discussion with Tene yesterday after writing the blog post. He said <span class="substr"> </span><a href="http://irclog.perlgeek.de/perl6/2009-07-22#i_1335273" title="perlgeek.de" rel="nofollow">the same thing</a> [perlgeek.de].</p><p>I think I started to value indenting everything many years ago, when I wrote my first medium-sized application (in BASIC) without indentation, and got into a situation when I had to find a missing 'END' somewhere. Everything I've been doing since then has reinforced the idea that consistently indenting things is a really, really good thing.</p><p>But you're right: making an exception in this case would solve the whole thi</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69579"></div>

</div>


<div id="replyto_69579"></div>

<ul id="group_69579">
	<li id="hiddens_69579" class="hide"></li>
</ul></li><li id="tree_69594" class="comment">
<div id="comment_status_69594" class="commentstatus"></div>
<div id="comment_69594" class="oneline">

	<div id="comment_top_69594" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69594" name="comment_link_69594" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69594" onclick="return D2.setFocusComment(69594)">Re:</a>
			
			<span id="comment_score_69594" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69594); return false">Score:2</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~Ovid/">Ovid (2709)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69594"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69594"><p><div class="quote"><p>One false assumption is that methods have to be indented when you have a block class in order to be pretty; I disagree, and methods can be flush left just like their pod, so all pretty so far.</p></div><p>This is an interesting issue in Perl because now TIMTOWTDI makes a real mess of things.  Frankly, I <em>don't</em> want my methods to be flush left because if I scan down the code, I like my indentation to instantly give me a hint of scope.  If the method is indented, that gives me information that left justification won't.  So let's say I have two classes in one package. The structure can look like this:</p><blockquote><div><p> <tt>class<br>&nbsp; &nbsp; method<br>&nbsp; &nbsp; method<br>&nbsp; &nbsp; method<br>end<br>class<br>&nbsp; &nbsp; method<br>&nbsp; &nbsp; metho<span class="substr"> </span></tt></p></div></blockquote></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69594"></div>

</div>


<div id="replyto_69594"></div>

<ul id="group_69594">
	<li id="hiddens_69594" class="hide"></li>
</ul><ul id="commtree_69594"><li id="tree_69595" class="comment">
<div id="comment_status_69595" class="commentstatus"></div>
<div id="comment_69595" class="oneline">

	<div id="comment_top_69595" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69595" name="comment_link_69595" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69595" onclick="return D2.setFocusComment(69595)">Re:</a>
			
			<span id="comment_score_69595" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69595); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69595"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69595"><p>Thank you, Ovid. You put words to what was only an indistinct feeling for me. I agree fully, I also don't want to sacrifice indentation within classes.</p><p>But I also want my Pod. Maybe I'll end up putting the Pod at the end of each file, and then writing some tests to make sure the Pod doesn't drift away from the methods themselves.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69595"></div>

</div>


<div id="replyto_69595"></div>

<ul id="group_69595">
	<li id="hiddens_69595" class="hide"></li>
</ul></li><li id="tree_69607" class="comment">
<div id="comment_status_69607" class="commentstatus"></div>
<div id="comment_69607" class="oneline">

	<div id="comment_top_69607" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69607" name="comment_link_69607" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69607" onclick="return D2.setFocusComment(69607)">Re:</a>
			
			<span id="comment_score_69607" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69607); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~duncand/">duncand (9318)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69607"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69607"><p>I agree that indenting methods relative to classes does look better, and I even do that myself some times.</p><p>Mainly I find that the indenting works best when individual classes are fairly small in the amount of code department, and similarly in those cases I generally don't use the dividing lines I mention.</p><p>Where I don't find indenting necessary is when classes are large or there are a number of large methods (ones that fill a screen or more), so that say you've got hundreds to thousands or more of code lines i<span class="substr"> </span></p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69607"></div>

</div>


<div id="replyto_69607"></div>

<ul id="group_69607">
	<li id="hiddens_69607" class="hide"></li>
</ul></li></ul></li></ul></li><li id="tree_69573" class="comment">
<div id="comment_status_69573" class="commentstatus"></div>
<div id="comment_69573" class="oneline">

	<div id="comment_top_69573" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69573" name="comment_link_69573" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69573" onclick="return D2.setFocusComment(69573)">MooseX::Declare has a similar problem with pod</a>
			
			<span id="comment_score_69573" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69573); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~cowens/">cowens (1569)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69573"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69573"><p>MooseX::Declare adds a block style class to Perl 5 and I have been running into the same POD problem.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69573"></div>

</div>


<div id="replyto_69573"></div>

<ul id="group_69573">
	<li id="hiddens_69573" class="hide"></li>
</ul><ul id="commtree_69573"><li id="tree_69580" class="comment">
<div id="comment_status_69580" class="commentstatus"></div>
<div id="comment_69580" class="oneline">

	<div id="comment_top_69580" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69580" name="comment_link_69580" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69580" onclick="return D2.setFocusComment(69580)">Re:</a>
			
			<span id="comment_score_69580" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69580); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69580"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69580"><p>Ah! I actually suspected as much when writing the post, but I didn't want to complicate the point further by mentioning MooseX::Declare. Thanks for confirming my suspicion.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69580"></div>

</div>


<div id="replyto_69580"></div>

<ul id="group_69580">
	<li id="hiddens_69580" class="hide"></li>
</ul></li></ul></li><li id="tree_69583" class="comment">
<div id="comment_status_69583" class="commentstatus"></div>
<div id="comment_69583" class="oneline">

	<div id="comment_top_69583" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69583" name="comment_link_69583" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69583" onclick="return D2.setFocusComment(69583)">S02#Whitespace_and_Comments</a>
			
			<span id="comment_score_69583" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69583); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~daxim/">daxim (8218)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69583"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69583"><blockquote><div><p>people who commented things out by putting #s at the absolute beginning of lines might accidentally create embedded comments by placing their # next to a curly brace or a parenthesis or a bracket. [...] I've now learned to put ## at the beginning of lines I want to comment out instead of just #.</p></div></blockquote><p>Is it too late to spec this in S02 the other way around? Let single # be used for commenting out, no matter what follows. Let ## (perhaps also ### and so on) switch on the special behaviour of brackets etc.

</p><p>The rati<span class="substr"> </span></p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69583"></div>

</div>


<div id="replyto_69583"></div>

<ul id="group_69583">
	<li id="hiddens_69583" class="hide"></li>
</ul><ul id="commtree_69583"><li id="tree_69584" class="comment">
<div id="comment_status_69584" class="commentstatus"></div>
<div id="comment_69584" class="oneline">

	<div id="comment_top_69584" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69584" name="comment_link_69584" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69584" onclick="return D2.setFocusComment(69584)">Re:</a>
			
			<span id="comment_score_69584" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69584); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69584"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69584"><p>I kinda like that way of thinking. And no, it's not too late to spec things differently.</p><p>However, if you want your proposal to be noticed and possibly acted upon, you really should send an email off to <a href="http://www.nntp.perl.org/group/perl.perl6.language/" title="perl.org" rel="nofollow">perl6-language</a> [perl.org]. That's where language features and spec changes are discussed.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69584"></div>

</div>


<div id="replyto_69584"></div>

<ul id="group_69584">
	<li id="hiddens_69584" class="hide"></li>
</ul></li><li id="tree_69585" class="comment">
<div id="comment_status_69585" class="commentstatus"></div>
<div id="comment_69585" class="oneline">

	<div id="comment_top_69585" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69585" name="comment_link_69585" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69585" onclick="return D2.setFocusComment(69585)">Re:</a>
			
			<span id="comment_score_69585" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69585); return false">Score:2</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~jmm/">jmm (276)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69585"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69585"><tt>Hmm, a row of hashes, optionally followed by other text, is often used for a separator, so there is still some potential for getting "special" meaning where none was intended if multi-hash is changed to mean "special" handling.<br><span class="substr"> </span> <br>How about making the special codes a bit harder to get by accident?&nbsp; Something like #{#&nbsp;<nobr> <wbr></nobr>... #}# - with no whitespace permitted between the braces and the enclosing hashes - for a block delimited comment, perhaps.&nbsp; That would only be an accidental hazard for people who</tt></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69585"></div>

</div>


<div id="replyto_69585"></div>

<ul id="group_69585">
	<li id="hiddens_69585" class="hide"></li>
</ul></li></ul></li><li id="tree_69593" class="comment">
<div id="comment_status_69593" class="commentstatus"></div>
<div id="comment_69593" class="oneline">

	<div id="comment_top_69593" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69593" name="comment_link_69593" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69593" onclick="return D2.setFocusComment(69593)">The root problem is interspersing code with POD</a>
			
			<span id="comment_score_69593" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69593); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~abw/">abw (998)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69593"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69593"><p>
I have to say, I find the whole idea of POD interspersed with code quite loathsome.  It appreciate all the reasons why it's a Good Thing (which boils down to keeping the docs as close to the code as possible), but it has so many drawbacks.
</p><p>
Most notably, it makes it hard to skim through the code when there's big globs of POD getting in the way.  If I'm reading the source then it's code I want to concentrate on.  If it's the end-user documentation that I want then I'll use perldoc or look at an HTML version<span class="substr"> </span></p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69593"></div>

</div>


<div id="replyto_69593"></div>

<ul id="group_69593">
	<li id="hiddens_69593" class="hide"></li>
</ul><ul id="commtree_69593"><li id="tree_69613" class="comment">
<div id="comment_status_69613" class="commentstatus"></div>
<div id="comment_69613" class="oneline">

	<div id="comment_top_69613" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69613" name="comment_link_69613" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69613" onclick="return D2.setFocusComment(69613)">Re:</a>
			
			<span id="comment_score_69613" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69613); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~chromatic/">chromatic (983)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69613"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69613"><blockquote><div><p> <em>Another problem is that it forces you to write your POD to match the structure of your code or vice versa. This is wrong.</em></p></div> </blockquote><p>This is the most salient criticism of interspersed POD, in my mind.  I spend a lot of time thinking about how to organize prose -- especially technical prose -- and the only case where interspersed POD reads naturally is solely API documentation.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69613"></div>

</div>


<div id="replyto_69613"></div>

<ul id="group_69613">
	<li id="hiddens_69613" class="hide"></li>
</ul></li><li id="tree_69629" class="comment">
<div id="comment_status_69629" class="commentstatus"></div>
<div id="comment_69629" class="oneline">

	<div id="comment_top_69629" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69629" name="comment_link_69629" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69629" onclick="return D2.setFocusComment(69629)">Re:</a>
			
			<span id="comment_score_69629" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69629); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~moritz/">moritz (8678)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69629"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69629"><tt>When I actually wrote a Perl 6 module with POD I found that I actually duplicated the signatures in the POD, because they are just so expressive.<br> <br>So I nagged p6l over this duplication (and triggered a huge flame war<nobr> <wbr></nobr>:/ ), and as a result Damian Conway came up with a way to include parts of the code from within the POD.<br> <br>Why am I telling you this here? Because that mechanism will encourage interleaved POD, because it's easier to reference something close by. So the Problem won't go away anytime soon.</tt></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69629"></div>

</div>


<div id="replyto_69629"></div>

<ul id="group_69629">
	<li id="hiddens_69629" class="hide"></li>
</ul><ul id="commtree_69629"><li id="tree_69631" class="comment">
<div id="comment_status_69631" class="commentstatus"></div>
<div id="comment_69631" class="oneline">

	<div id="comment_top_69631" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69631" name="comment_link_69631" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69631" onclick="return D2.setFocusComment(69631)">Re:</a>
			
			<span id="comment_score_69631" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69631); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~cjfields/">cjfields (3851)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69631"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69631">Interesting, considering in PBP Damian suggests (In Documentation, under 'Contiguity') <b>not</b> to intersperse POD throughout code, for similar reasons already stated here.</div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69631"></div>

</div>


<div id="replyto_69631"></div>

<ul id="group_69631">
	<li id="hiddens_69631" class="hide"></li>
</ul></li></ul></li><li id="tree_69686" class="comment">
<div id="comment_status_69686" class="commentstatus"></div>
<div id="comment_69686" class="oneline">

	<div id="comment_top_69686" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69686" name="comment_link_69686" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69686" onclick="return D2.setFocusComment(69686)">Re:</a>
			
			<span id="comment_score_69686" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69686); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~Hercynium/">Hercynium (8027)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69686"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69686">I think you've touched upon something that leads to the root of the issue - the fact that there are several different types of documentation that is produced, each with different display needs and different audiences, and possibly different authors.<br>
<br>
Like you said, comments are written by the programmer, for other programmers (including oneself) and are intended to communicate knowledge about the nearby code.<br>
<br>
On the other hand, POD's purpose is a little more loosely defined. POD is usually written by the p</div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69686"></div>

</div>


<div id="replyto_69686"></div>

<ul id="group_69686">
	<li id="hiddens_69686" class="hide"></li>
</ul><ul id="commtree_69686"><li id="tree_69958" class="comment">
<div id="comment_status_69958" class="commentstatus"></div>
<div id="comment_69958" class="oneline">

	<div id="comment_top_69958" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_69958" name="comment_link_69958" href="//use.perl.org/comments.pl?sid=43438&amp;cid=69958" onclick="return D2.setFocusComment(69958)">Re:</a>
			
			<span id="comment_score_69958" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 69958); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~vrk/">vrk (9361)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_69958"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_69958"><p>
Exactly! POD is indeed used for multiple purposes; some people have even authored books written in POD.
</p><p>
However, I find the debate between "POD interspersers" and "POD separatists" boils down to only two usages of POD. The first is to document the API, which is a low-level documentation from one programmer to another. The second is to document the program, which is a high-level documentation from the programmer to the user. Incidentally these two use cases follow closely the preferences of "POD interspers<span class="substr"> </span></p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_69958"></div>

</div>


<div id="replyto_69958"></div>

<ul id="group_69958">
	<li id="hiddens_69958" class="hide"></li>
</ul></li></ul></li></ul></li>
			<li id="roothiddens" class="hide"></li>
		</ul>
	
	
	
	


<div id="replyto_0"></div>


<div id="discussion_buttons">


<span class="nbutton"><p><b><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_a" class="hide">Get More Comments</span></a></b></p></span>



<span class="nbutton"><p><b><a href="//use.perl.org/comments.pl?sid=43438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></b></p></span>







</div>



	<script type="text/javascript">
<!--
		D2.currents()['hidden']   = 0;
		D2.currents()['full']     = 0;
		D2.currents()['oneline']  = 16;
		// D2.currents_total(16);

		D2.abbrev_comments({69958:522,69585:235,69686:528,69593:522,69579:454,69583:565,69594:807,69572:529,69607:529});
		D2.noshow_comments([]);
		D2.pieces_comments([69572,69579,69594,69595,69607,69573,69580,69583,69584,69585,69593,69613,69629,69631,69686,69958]);
		D2.init_hiddens([]);

		D2.finishLoading();


		if (D2.thresh_totals()[6][6][1] == 0) {
			D2.replyTo(0, 1);
		}


//-->
	</script>

<!-- end template: ID 157, printCommComments;misc;default -->



<!-- start template: ID 112, footer;misc;default -->

</div>
                </div>
                <div id="footer">
			<div class="download">
                                <!-- START DOWNLOAD PERL -->
                                <!-- Perl Mongers, Inc.  web@perlmongers.org -->
                                <a href="http://www.cpan.org/ports/index.html"><img src="http://www.perl.org/Images/download_perl.gif" width="102" height="42" alt="Download Perl Now!"></a>
                                <!-- END DOWNLOAD PERL -->
                        </div>	
			<div class="sitelogo">
				<a href="//use.perl.org/">
					<img src="http://images.use.perl.org/topics/useperl.gif" alt="useperl">
				</a>
			</div>
                        <em>
				And don't tell me there isn't one bit of difference between null and space,<BR>
because that's exactly how much difference there is.&nbsp; :-)<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --Larry Wall in &lt;10209@jpl-devvax.JPL.NASA.GOV&gt;
			</em>
		</div>
		<div class="copyright">
			Stories, comments, journals, and other submissions on use Perl; are Copyright 1998-2006, their respective owners.
		</div>
		<div class="btmnav">
			<ul>
	<li class="begin">
		<a href="//use.perl.org/faq.shtml">FAQ</a>
	</li>
	<li>
		<a href="//use.perl.org/about.shtml">About</a>
        </li>
        <li>
		<a href="//use.perl.org/submit.pl">Submit Story</a>
        </li>
        <li>
		<a href="//use.perl.org/search.pl">Older Stories</a>
        </li>
        <li>	
		<a href="//use.perl.org/topics.shtml">Topics</a>
        </li>
        <li>
		<a href="//use.perl.org/pollBooth.pl">Polls</a>
        </li>
        <li>
		<a href="//use.perl.org/journal.pl">Journals</a>
        </li>
        <li>
		<a href="//use.perl.org/authors.pl">Authors</a>
        </li>
        <li>
		<a href="//use.perl.org/modulelist/">New Modules</a>
        </li>
        <li>
		<a href="//use.perl.org/users.pl?op=edithome">Preferences</a>

        </li>
</ul>
		</div>
        </div>
<div id="modal_cover" style="display:none" onclick="hide_modal_box()"></div>
<div id="modal_box" style="display:none">
        <div class="generaltitle" >
                <div class="title"><h3><span id="preference_title"></span> <a href="#" onclick="hide_modal_box(); return false"><img src="//images.use.perl.org/sic_close.png" alt="Close"></a></h3></div>
        </div>
        <div id="modal_box_content"></div>
</div>

	<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
	<script type="text/javascript">
		_uacct = "UA-32013-15";
		urchinTracker();
	</script>

</body>
</html>

<!-- end template: ID 112, footer;misc;default -->

