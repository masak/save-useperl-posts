<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="shortcut icon" href="//use.perl.org/favicon.ico">

<title>Journal of masak (6289)</title>

<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/base.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/comments.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="screen, projection" href="//images.use.perl.org/useperl.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="print" href="//images.use.perl.org/print.css?T_2_5_0_235">
<link rel="stylesheet" type="text/css" media="handheld" href="//images.use.perl.org/handheld.css?T_2_5_0_235">

<script src="//images.use.perl.org/jquery/jquery-1.2.6.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/jquery/jquery.metadata.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/slash.util.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/jquery/jquery.slashdot.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/yahoo.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/dom.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/event.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/dragdrop.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/animation.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/yui/calendar.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/sd_calendar.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/slash.article-info.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/tag-ui.js?T_2_5_0_235" type="text/javascript"></script>
<script src="//images.use.perl.org/common.js?T_2_5_0_235" type="text/javascript"></script>

<!-- start template: ID 121, header;misc;default -->

<link rel="top"       title="All the Perl that's Practical to Extract and Report" href="//use.perl.org/" >
<link rel="search"    title="Search use Perl" href="//use.perl.org/search.pl">
<link rel="author"    title="masak" href="//use.perl.org/~masak/">
<link rel="alternate" title="masak's Journal RSS" href="http://use.perl.org/~masak/journal/rss" type="application/rss+xml">
<link rel="alternate" title="masak's Friends' Journals RSS" href="http://use.perl.org/~masak/journal/friends/rss" type="application/rss+xml">
<link rel="alternate" title="Most Recent Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="Most Active Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;type=count&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="Most Befriended Journals RSS" href="//use.perl.org/journal.pl?op=top&amp;type=friends&amp;content_type=rss" type="application/rss+xml">
<link rel="alternate" title="use Perl RSS" href="//use.perl.org/index.rss" type="application/rss+xml">
</head>
<body class="useperlorg">
<div id="top_parent"></div>

<div id="jump">
	<a href="#main-articles">Stories</a>
	<br>
	<a href="#blocks">Slash Boxes</a>
	<br>
	<a href="#comments">Comments</a>
</div>
<div class="ad1">

</div>
<div id="frame">

<!-- UsePerl Ad Start -->
<div class="ad1"><!-- ad position 1 -->
<div id="fad1" style="text-align:center">
<!-- DoubleClick Ad Tag 1 -->
<script type="text/javascript">
	dfp_ord=Math.random()*10000000000000000;
	dfp_tile = 1;

	document.write('<script type="text/javascript" src="http://ad.doubleclick.net/adj/ostg.useperl/mainpage_p1_leader;pg=index;logged_in=0;tile='+dfp_tile+';ord='+dfp_ord+'?"><\/script>');
	dfp_tile++;
</script>
</div>
<!-- End DoubleClick Ad Tag 1 --></div>
<!-- UsePerl Ad End -->

	<div id="topnav">
		<div id="logo">
			<h1>
				<a href="//use.perl.org">use Perl</a>
			</h1>
		</div>
                <div class="search">
			<form method="get" action="//use.perl.org/search.pl">
				<fieldset>
					<legend></legend>
					<label>Search <strong>use Perl</strong></label>
					<input type="text" name="query" value="" size="20">
					<input type="submit" value="Go" class="button">
				</fieldset>
			</form>
		</div>
	</div>
	<div id="slogan">
		<h2>
			All the Perl that's Practical to Extract and Report
		</h2>
	</div>
	<div id="journalnav">
		<div id="links">
			

<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="navigation-title">
		<h4>
			Navigation
		</h4>
	</div>
	<div class="content" id="navigation-content">
		<ul>
	<li class="begin">
		<a href="//use.perl.org/faq.shtml">FAQ</a>
	</li>
	<li>
		<a href="//use.perl.org/about.shtml">About</a>
        </li>
        <li>
		<a href="//use.perl.org/submit.pl">Submit Story</a>
        </li>
        <li>
		<a href="//use.perl.org/search.pl">Older Stories</a>
        </li>
        <li>	
		<a href="//use.perl.org/topics.shtml">Topics</a>
        </li>
        <li>
		<a href="//use.perl.org/pollBooth.pl">Polls</a>
        </li>
        <li>
		<a href="//use.perl.org/journal.pl">Journals</a>
        </li>
        <li>
		<a href="//use.perl.org/authors.pl">Authors</a>
        </li>
        <li>
		<a href="//use.perl.org/modulelist/">New Modules</a>
        </li>
        <li>
		<a href="//use.perl.org/users.pl?op=edithome">Preferences</a>

        </li>
</ul>
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->


		</div>
	</div>
	<div id="contents">
		
		<div id="journal">

<!-- end template: ID 121, header;misc;default -->



<!-- start template: ID 55, journalhead;journal;default -->

<div id="slashboxes">

<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="userlogin-title">
		<h4>
			use Perl Log In
		</h4>
	</div>
	<div class="content" id="userlogin-content">
		
			<form action="//use.perl.org/login.pl" method="post">
<fieldset>
	<legend>Log In</legend>
	<label>
		Nickname
	</label>
	<input type="text" name="unickname" size="20" value="">
	<label>
		Password
	</label>
	<input type="hidden" name="returnto" value="//use.perl.org/">
	<input type="hidden" name="op" value="userlogin">
	<input type="password" name="upasswd" size="20">
	<label class="checkbox">
		<input type="checkbox" name="login_temp" value="yes">
		Public Terminal
	</label>
	<input type="submit" name="userlogin" value="Log in" class="button">
	</fieldset>
</form>
<p>
	[ <b>
		<a href="//use.perl.org/login.pl?op=newuserform">
			Create a new account
		</a>
	</b> ]
</p>
		
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->



<!-- start template: ID 474, sidebox;misc;default -->

<div class="block">
	<div class="title" id="user-info-title">
		<h4>
			masak (6289)
		</h4>
	</div>
	<div class="content" id="user-info-content">
		<a href="//use.perl.org/~masak/">masak</a> <br>&nbsp;&nbsp;(email not shown publicly)<br><a href="http://masak.org/carl" rel="nofollow">http://masak.org/carl</a><br><hr>Been programming Perl since 2001. Found Perl 6 somewhere around 2004, and fell in love. Now developing November (a Perl 6 wiki), Druid (a Perl 6 board game), pls (a Perl 6 project installer), GGE (a regex engine), and Yapsi (a Perl 6 implementation). Heavy user of and irregular committer to Rakudo.
	</div>
</div>

<!-- end template: ID 474, sidebox;misc;default -->


</div>
<div id="users-blocks">


<!-- start template: ID 376, tabbedmenu;misc;default -->



<!-- end template: ID 376, tabbedmenu;misc;default -->

<div class="generaltitle" >
	<div class="title">
		<h3 >
			<a href="//use.perl.org/~masak/journal/">Journal</a> of <a href="//use.perl.org/~masak/">masak</a> (6289)
			
		</h3>
	</div>
</div>


<div id="usermenu">
<ul class="menu">
<li><span class="begin"><a href="//use.perl.org/~masak/" class="begin">Info</a></span></li><li class="selected"><b><a href="//use.perl.org/~masak/journal/">Journal</a></b></li><li><a href="//use.perl.org/~masak/firehose/">Firehose</a></li><li><a href="//use.perl.org/~masak/friends/">Friends</a></li><li><a href="//use.perl.org/~masak/fans/">Fans</a></li><li><a href="//use.perl.org/~masak/foes/">Foes</a></li><li><a href="//use.perl.org/~masak/freaks/">Freaks</a></li><li><a href="//use.perl.org/~masak/tags/">Tags</a></li><li><a href="//use.perl.org/~masak/bookmarks/" class="end">Bookmarks</a></li>
</ul>
</div><div class="generalbody">

<!-- start template: ID 376, tabbedmenu;misc;default -->

<ul class="menu">
<li><span class="begin"><a href="//use.perl.org/journal.pl?op=top" class="begin">Top&nbsp;10</a></span></li><li><a href="//use.perl.org/journal.pl?op=friends" class="end">Friend's&nbsp;Journals</a></li>
</ul>

<!-- end template: ID 376, tabbedmenu;misc;default -->

<!-- end template: ID 55, journalhead;journal;default -->



<!-- start template: ID 65, slashdot;journal;default -->

<div id="journalslashdot">
    
	<div class="journaldate">Friday January 22, 2010</div>
	
	<div class="details">12:41 PM</div>
	<div class="title">
		<h3>Code generation and stone soup</h3>
	</div>
	<div class="adminoptions">
		[

			<a href="//use.perl.org/~masak/journal/40122">#40122</a>
		]
	</div>

	<div class="intro"><p>I don't know what kept me away from generating code for so long. Fear and prejudice, perhaps.</p><p>I've been trying it the last few days, and I have two things to say. First, it's like learning to program all over again. Remember that sense of power from the early days, when just picking up coding? "Hey, I can program this piece of code to do whatever I want." Well, guess what? That feeling comes back when one starts down on the path to madn... erm, to code generation. Only it's stronger. "Hey, I can program this piece of code to program <em>that</em> piece of code to do whatever it wants!" I think I've just discovered meta-hubris. Most likely, I'm not the first to do so.</p><p>Second, there's a flip-side to the feeling of power. That other feeling is how you feel when you knit your brows and wish that your neurons would line up a bit better so you could think more clearly about the problem at hand. Who would have thought, that feeling is also stronger when you're suddenly writing two different, entwined and related programs at the same time, in the same file. In my case, the knitted brows turn into an empty stare and a jaw left slackly agape, as I sit there wishing that I was better at context-switching between runloops.</p><p>Honestly, I think I expected <code>eval</code> to be the source of much programmer confusion, but I have to confess that it seems I underestimated the vistas it opens up when you buy into the idea of generating exactly the piece of code you need for the task (from an AST, say), and then <code>eval</code> it into a closure. That's what <a href="http://en.wikipedia.org/wiki/Compiler#Back_end" rel="nofollow">the back end of a compiler</a> ends up doing, so maybe I shouldn't be so surprised that it's a versatile technique.</p><p>Lately, I've been in the business of squeezing every drop of juice out of the already implemented control flow constructs already implemented in Rakudo. I'm writing a p6regex&#8594;p6 compiler, you see. (Yes, that's <a href="http://masak.org/carl/bpw-2009-gge/talk.pdf" rel="nofollow">a rather crazy notion</a>; thanks for asking.) Along the way, I've often felt the need for not-yet-implemented control flow. This has led me to this hope-inducing maxim:</p><p> <em>Every type of control flow in programming languages is just convenient sugar for <code>if</code> statements and <code>while</code> loops.</em> </p><p> <code>if</code>s and <code>while</code>s are the stone soup to which all the rest of our control flow can be added as seasoning. <code>if</code>s let you conditionally skip ahead in code, and <code>while</code>s allow you to conditionally skip back. That's all you need.</p><p>Here are some examples.</p><ul>
  <li>Switch statements are just sugar for chained <code>if</code>/<code>elsif</code>/<code>else</code> statements. Even Perl 6's <code>given</code>/<code>when</code> constructs.</li><li>The variants <code>next</code>, <code>last</code> and <code>redo</code>, either with or without a label to affect a less-than-innermost loop, can be desugared to sad boolean-ish variables, plus some <code>if</code> statements to appropriately regulate the expression of the code inside the loop. (Yes, go ahead and twitch just thinking of it. That sugar is there for a reason.)</li><li>Subroutines and subroutine calls can be simulated with the appropriate use of a switch statement and an explicit <a href="http://en.wikipedia.org/wiki/Call_stack" rel="nofollow">call stack</a> stored in an array variable.</li><li>Even exceptions, or more generally continuations, can be desugared in this way. As soon as you have total control of the call stack, you're free to save and rewind to some previous state to your heart's content.</li></ul><p>Aside from the switch statements and unlabeled <code>next</code> etc, which already work very well in Rakudo, I've been doing the whole list of desugarings in <a href="http://github.com/masak/gge" rel="nofollow">GGE</a> (the regex compiler). The part with the continuations was especially fun. I needed them for backtracking, at least as long as the compiler was only an interpreter.</p><p>But then, during a fruitful discussion with diakopter++, I was told how to emulate (delimited) <code>goto</code>s with a switch and a loop. The idea is quite obvious in retrospect: just keep the current 'label' in a variable, and switch on it in each iteration. Presto! I should have thought of that. I don't even need to <a href="http://use.perl.org/~masak/journal/40087" rel="nofollow">flee to PIR</a> any more.</p><p>I took the idea and generalized it to delimited <code>gosub</code>s: instead of keeping the current label in a scalar, keep it at the top of a stack. Define macro-like constructs to push to (<code>local-branch</code>) and pop from (<code>local-return</code>) the stack. Suddenly I don't need continuations as much.</p><p>Result: <a href="http://gist.github.com/283799" rel="nofollow">this</a>. We send in the regex<nobr> <wbr></nobr><code>/&lt;[a..b]&gt; | &lt;[b..e]&gt;/</code> on the top line, along with the target string <code>c</code> to match on. The program generates an AST, an anonymous subroutine which executes the regex in atomic Perl 6 operations, and finally a match object which indeed finds <code>c</code> to be a match.</p><p> <a href="http://gist.github.com/283928" rel="nofollow">Here's</a> a similar but slightly more involved example. And <a href="http://gist.github.com/284959" rel="nofollow">here's</a> one doing captures and backreferences inside a quantified non-capturing group. Isn't that exquisite? (Ok, bad choice of word. Sorry.)</p><p>As I said, I wrote most of with a feeling of being not just in over my head, but of being in over my head <em>twice</em>. I'm still a bit surprised it works. The runtime compilation seems to introduce a bit of a speed penalty, but (1) it's a one-time cost, since you can re-use the regex object, and (2) I told you it would be slow.</p><p>The code-generating work still resides only in a local branch on my computer. I'll push it to <code>master</code> as soon as I'm done bringing GGE back to its former capabilities. (<b>Update 2010-01-24:</b> Done, and <a href="http://github.com/masak/gge/commit/f9e2d4a3d33533270a54a523277d0b9bebd995cc" rel="nofollow">done</a>.)</p><p>Code writing code. What a concept!</p></div>
	
    

	<div class="journalpage">
		
		<br>
		<a href="//use.perl.org/journal.pl?op=list&amp;uid=6289" class="all">List all Journal entries</a>
	</div>
</div>

<!-- end template: ID 65, slashdot;journal;default -->

</div></div>

<!-- start template: ID 159, printCommentsMain;misc;default -->

<a name="acomments"></a>
<div class="commentwrap" id="commentwrap">

<div class="commentBox" style="font-size: 120%">
	<div>
<span class="escape-link"><a href="//use.perl.org/~masak/journal/40122" title="Back to Article - Code generation and stone soup">Code generation and stone soup</a></span>
<span class="commentBoxLinks"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_d"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=44438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></span>
	</div>
</div>

	<div class="commentBoxForm" id="commentControlBox">
<div></div>
	<div class="commentBox">
		<small>
		<b>The Fine Print:</b> The following comments are owned by whoever posted them.  We are not responsible for them in any way.
		</small>
<noscript><br><small>Without JavaScript enabled, you might want to
use <a href="//use.perl.org/comments.pl?sid=44438&amp;threshold=0&amp;commentsort=0&amp;mode=thread&amp;no_d2=1">the classic discussion system</a> instead.  If you <a href="//use.perl.org/login.pl">login</a>, you can remember this preference.
</small></noscript>
	</div>
	</div>
	
		<div id="d2out" class="horizontal">
		<div id="d2act" class="hide">
		<div class="loki" id="gods">
		<div class="block">
			<div class="title">

				<h4>
				
					<span class="h-inline">
					<a href="//use.perl.org/~masak/journal/40122" title="Back to Article - Code generation and stone soup">Code generation and stone soup</a></span>
					<span class="titlecount"><a href="//use.perl.org/~masak/journal/40122#topcomment" title="Back to Top Comment - Code generation and stone soup"><span id="titlecountnum">9</span>&nbsp;Comments</a></span>
				
		<span class="ccw-header-links"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_b"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=44438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></span>
		<span id="d2toggle" title="Toggle window location" onclick="D2.toggleDisplayOptions()" class="close">/</span>
				</h4>
			</div>
		</div>
<script type="text/javascript">
gCommentControlWidget = null;

YAHOO.slashdot.ThresholdApp = function() {
  return {
    init: function() {
      gCommentControlWidget = new YAHOO.slashdot.ThresholdWidget('X');
      gCommentControlWidget.setTHT(D2.user_threshold(), D2.user_highlightthresh());
      D2.updateTotals();
    }
  };
}();

YAHOO.util.Event.addListener(window, "load", YAHOO.slashdot.ThresholdApp.init);
</script>
		<div id="bones">
      <div id="ccw">
        <div id="ccw-body" class="ccw-core">
          <div id="ccw-panel-container" class="ccw-core">
            <div id="ccw-full-panel" class="ccw-panel">
              <div class="ccw-panel-border"></div>
              <div id="ccw-full-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-full-count-text" class="ccw-count-text"><span id="currentFull"></span><span id="ccw-full-phrase">&nbsp;Full</span></span>
              </div>
            </div>
            <div id="ccw-abbr-panel" class="ccw-panel">
              <div class="ccw-panel-border"></div>
              <div id="ccw-abbr-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-abbr-count-text" class="ccw-count-text"><span id="currentOneline"></span><span id="ccw-abbr-phrase">&nbsp;Abbreviated</span></span>
              </div>
            </div>
            <div id="ccw-hide-panel" class="ccw-panel">
              <div id="ccw-hide-count-pos" class="ccw-core-pos ccw-count-pos">
                <span id="ccw-hide-count-text" class="ccw-count-text"><span id="currentHidden"></span><span id="ccw-hide-phrase">&nbsp;Hidden</span></span>
              </div>
            </div>
          </div>
    
          <div id="ccw-control" class="ccw-core">
            <div id="ccw-centering-rail" class="ccw-core">
              <div id="ccw-hide-bar-pos" class="ccw-core-pos">
                <div id="ccw-hide-bar" class="ccw-bar">
                  <div id="ccw-hide-bar-tab" class="ccw-bar-tab"></div>
                  <div id="ccw-hide-bar-upzone" class="ccw-upzone" onclick="gCommentControlWidget.stepTHT(HIDE_BAR, +1)"></div>
                  <div id="ccw-hide-bar-downzone" class="ccw-downzone" onclick="gCommentControlWidget.stepTHT(HIDE_BAR, -1)"></div>
                </div>
              </div>
              <div id="ccw-abbr-bar-pos" class="ccw-core-pos">
                <div id="ccw-abbr-bar" class="ccw-bar">
                  <div id="ccw-abbr-bar-tab" class="ccw-bar-tab"></div>
                  <div id="ccw-abbr-bar-upzone" class="ccw-upzone" onclick="gCommentControlWidget.stepTHT(ABBR_BAR, +1)"></div>
                  <div id="ccw-abbr-bar-downzone" class="ccw-downzone" onclick="gCommentControlWidget.stepTHT(ABBR_BAR, -1)"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
		</div>
		<div class="commentControlFooter"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_c"></span> More</a> |

	<a href="//use.perl.org/login.pl" onclick="show_login_box(); return false">Login</a>



	| <a href="//use.perl.org/comments.pl?sid=44438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a><div id="login_cover" style="display:none" onclick="hide_login_box()"></div>
<div id="login_box" style="display:none">
<div class="generaltitle" >
	<div class="title">
		<h3 >
			Please Log In to Continue<a href="#" onclick="hide_login_box(); return false" class="close" title="Close this box"><img id="login_box_close" src="//images.use.perl.org/sic_close.png" alt="Close"></a>
			
		</h3>
	</div>
</div>
<div id="login_box_content">
<form action="//use.perl.org/login.pl" method="post">
<fieldset>
	<legend>Log In</legend>
	<label>
		Nickname
	</label>
	<input type="text" name="unickname" size="20" value="">
	<label>
		Password
	</label>
	<input type="hidden" name="returnto" value="//use.perl.org/comments.pl?sid=44438">
	<input type="hidden" name="op" value="userlogin">
	<input type="password" name="upasswd" size="20">
	<label class="checkbox">
		<input type="checkbox" name="login_temp" value="yes">
		Public Terminal
	</label>
	<input type="submit" name="userlogin" value="Log in" class="button">
	</fieldset>
</form>
<p>
	[ <b>
		<a href="//use.perl.org/login.pl?op=newuserform">
			Create a new account
		</a>
	</b> ]
</p>
</div></div>
<script type="text/javascript">logged_in = 0</script></div>
		<div id="commentControlBoxStatus" class="hide"><b>Loading... please wait.</b></div>
	</div>
</div>
		</div>
	
</div>
<a name="topcomment"></a>

<!-- end template: ID 159, printCommentsMain;misc;default -->



<!-- start template: ID 157, printCommComments;misc;default -->

<script src="//images.use.perl.org/comments.js?T_2_5_0_235" type="text/javascript"></script>
	<script type="text/javascript">
<!--
	D2.d2_keybindings_disable()[191] = 1;
	window.onscroll = D2.d2act;
	D2.boxStatus(1);
D2.comments({ 71578: { uid: 6289, pid: 71572, subject: "Re:Congratulations:", read: 0, points: 1, kids: [  ], opid: 71572 }, 71574: { uid: 2855, pid: 71571, subject: "Re:copy and paste", read: 0, points: 1, kids: [ 71579 ], opid: 71571 }, 71570: { uid: 6289, pid: 71568, subject: "Re:the functional version", read: 0, points: 1, kids: [  ], opid: 71568 }, 71568: { uid: 1658, pid: 0, read: 0, points: 1, kids: [ 71570 ], opid: 0 }, 71580: { uid: 2855, pid: 71579, subject: "Re:copy and paste", read: 0, points: 1, kids: [  ], opid: 71579 }, 71571: { uid: 6289, pid: 71569, subject: "Re:copy and paste", read: 0, points: 1, kids: [ 71574 ], opid: 71569 }, 71572: { uid: 5147, pid: 0, read: 0, points: 1, kids: [ 71578 ], opid: 0 }, 71579: { uid: 6289, pid: 71574, subject: "Re:copy and paste", read: 0, points: 1, kids: [ 71580 ], opid: 71574 }, 71569: { uid: 2855, pid: 0, read: 0, points: 1, kids: [ 71571 ], opid: 0 } });

D2.thresh_totals({6:{6:{1:9,3:0,2:0}},4:{6:{1:9,3:0,2:0},4:{1:9,3:0,2:0},5:{1:9,3:0,2:0}},1:{6:{1:0,3:0,2:9},4:{1:0,3:0,2:9},1:{1:0,3:9,2:0},3:{1:0,3:0,2:9},2:{1:0,3:3,2:6},5:{1:0,3:0,2:9}},3:{6:{1:9,3:0,2:0},4:{1:9,3:0,2:0},3:{1:9,3:0,2:0},5:{1:9,3:0,2:0}},0:{6:{1:0,3:0,2:9},4:{1:0,3:0,2:9},1:{1:0,3:9,2:0},3:{1:0,3:0,2:9},0:{1:0,3:9,2:0},2:{1:0,3:3,2:6},5:{1:0,3:0,2:9}},2:{6:{1:9,3:0,2:0},4:{1:9,3:0,2:0},3:{1:9,3:0,2:0},2:{1:9,3:0,2:0},5:{1:9,3:0,2:0}},5:{6:{1:9,3:0,2:0},5:{1:9,3:0,2:0}},"-1":{6:{1:0,3:0,2:9},4:{1:0,3:0,2:9},1:{1:0,3:9,2:0},3:{1:0,3:0,2:9},0:{1:0,3:9,2:0},2:{1:0,3:3,2:6},5:{1:0,3:0,2:9},"-1":{1:0,3:9,2:0}}});

D2.root_comment(0);
D2.root_comments([71568,71569,71572]);
D2.root_comments_hash({71568:1,71572:1,71569:1});

D2.d2_comment_order(0);
D2.user_uid(7);
D2.user_is_anon(1);
D2.user_is_admin(0);
D2.user_is_subscriber(0);
D2.user_threshold(0);
D2.user_highlightthresh(4);
D2.user_d2asp(0);

D2.discussion_id(44438);

D2.d2_seen('71568,1,1,1,1,2,4,1,1');
D2.more_comments_num(0);


//-->
	</script>




	
	
	
	
		<ul id="commentlisting" class="d2">
			<li id="tree_71568" class="comment">
<div id="comment_status_71568" class="commentstatus"></div>
<div id="comment_71568" class="oneline">

	<div id="comment_top_71568" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71568" name="comment_link_71568" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71568" onclick="return D2.setFocusComment(71568)">the functional version</a>
			
			<span id="comment_score_71568" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71568); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~hdp/">hdp (1658)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71568"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71568"><p><code>while</code> is just sugar for recursion.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71568"></div>

</div>


<div id="replyto_71568"></div>

<ul id="group_71568">
	<li id="hiddens_71568" class="hide"></li>
</ul><ul id="commtree_71568"><li id="tree_71570" class="comment">
<div id="comment_status_71570" class="commentstatus"></div>
<div id="comment_71570" class="oneline">

	<div id="comment_top_71570" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71570" name="comment_link_71570" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71570" onclick="return D2.setFocusComment(71570)">Re:</a>
			
			<span id="comment_score_71570" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71570); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71570"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71570">Aye. Had I needed to emulate while, I might have gone down that route. Better have that tail-call optimizer ready, though, or longer loops will blow the stack.</div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71570"></div>

</div>


<div id="replyto_71570"></div>

<ul id="group_71570">
	<li id="hiddens_71570" class="hide"></li>
</ul></li></ul></li><li id="tree_71569" class="comment">
<div id="comment_status_71569" class="commentstatus"></div>
<div id="comment_71569" class="oneline">

	<div id="comment_top_71569" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71569" name="comment_link_71569" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71569" onclick="return D2.setFocusComment(71569)">copy and paste</a>
			
			<span id="comment_score_71569" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71569); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~ChrisDolan/">ChrisDolan (2855)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71569"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71569"><p>Code generation is OK if it's transient -- passed straight to a compiler and run.  If instead it's written to disk as a template, then it's just formalized copy-and-paste, with all of the maintenance downsides.</p><p>The biggest drawback to runtime code generation is obscurity.  It's opaque to static analysis and smat editors, and to most humans too.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71569"></div>

</div>


<div id="replyto_71569"></div>

<ul id="group_71569">
	<li id="hiddens_71569" class="hide"></li>
</ul><ul id="commtree_71569"><li id="tree_71571" class="comment">
<div id="comment_status_71571" class="commentstatus"></div>
<div id="comment_71571" class="oneline">

	<div id="comment_top_71571" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71571" name="comment_link_71571" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71571" onclick="return D2.setFocusComment(71571)">Re:</a>
			
			<span id="comment_score_71571" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71571); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71571"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71571"><p><div class="quote"><p>The biggest drawback to runtime code generation is obscurity. It's opaque to static analysis and smat editors, and to most humans too.</p></div><p>Indeed. A static analyzer would have to be <em>really</em> smart to figure out that I'm collecting together little pieces of code as I traverse the AST...</p><p>Oh, and there seems to be another cardinal law involved in code generation: whatever happens, don't ever expect both your programs to look nicely indented anymore.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71571"></div>

</div>


<div id="replyto_71571"></div>

<ul id="group_71571">
	<li id="hiddens_71571" class="hide"></li>
</ul><ul id="commtree_71571"><li id="tree_71574" class="comment">
<div id="comment_status_71574" class="commentstatus"></div>
<div id="comment_71574" class="oneline">

	<div id="comment_top_71574" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71574" name="comment_link_71574" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71574" onclick="return D2.setFocusComment(71574)">Re:</a>
			
			<span id="comment_score_71574" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71574); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~ChrisDolan/">ChrisDolan (2855)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71574"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71574"><p>In the worst case, you can use templates for the generated code.  That pulls the odd indentation out of the main code.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71574"></div>

</div>


<div id="replyto_71574"></div>

<ul id="group_71574">
	<li id="hiddens_71574" class="hide"></li>
</ul><ul id="commtree_71574"><li id="tree_71579" class="comment">
<div id="comment_status_71579" class="commentstatus"></div>
<div id="comment_71579" class="oneline">

	<div id="comment_top_71579" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71579" name="comment_link_71579" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71579" onclick="return D2.setFocusComment(71579)">Re:</a>
			
			<span id="comment_score_71579" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71579); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71579"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71579"><p>I might give it a try. It does solve the templating issue, but it introduces distance between the templates and the place(s) where they're used. It's a bit of a lesser-of-two evils situation.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71579"></div>

</div>


<div id="replyto_71579"></div>

<ul id="group_71579">
	<li id="hiddens_71579" class="hide"></li>
</ul><ul id="commtree_71579"><li id="tree_71580" class="comment">
<div id="comment_status_71580" class="commentstatus"></div>
<div id="comment_71580" class="oneline">

	<div id="comment_top_71580" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71580" name="comment_link_71580" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71580" onclick="return D2.setFocusComment(71580)">Re:</a>
			
			<span id="comment_score_71580" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71580); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~ChrisDolan/">ChrisDolan (2855)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71580"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71580"><p>True.  Java is actually lucky in this area: it's trivial to embed an arbitrary file in a Jar file right next to the<nobr> <wbr></nobr>.class that uses it.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71580"></div>

</div>


<div id="replyto_71580"></div>

<ul id="group_71580">
	<li id="hiddens_71580" class="hide"></li>
</ul></li></ul></li></ul></li></ul></li></ul></li><li id="tree_71572" class="comment">
<div id="comment_status_71572" class="commentstatus"></div>
<div id="comment_71572" class="oneline">

	<div id="comment_top_71572" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71572" name="comment_link_71572" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71572" onclick="return D2.setFocusComment(71572)">Congratulations:</a>
			
			<span id="comment_score_71572" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71572); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~Aristotle/">Aristotle (5147)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71572"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71572"><p>You have discovered the criteria for Turing completeness.<nobr> <wbr></nobr><tt>:-)</tt> </p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71572"></div>

</div>


<div id="replyto_71572"></div>

<ul id="group_71572">
	<li id="hiddens_71572" class="hide"></li>
</ul><ul id="commtree_71572"><li id="tree_71578" class="comment">
<div id="comment_status_71578" class="commentstatus"></div>
<div id="comment_71578" class="oneline">

	<div id="comment_top_71578" class="commentTop newcomment">
		<div class="title">
			
			<h4><a id="comment_link_71578" name="comment_link_71578" href="//use.perl.org/comments.pl?sid=44438&amp;cid=71578" onclick="return D2.setFocusComment(71578)">Re:</a>
			
			<span id="comment_score_71578" class="score">(<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 71578); return false">Score:1</a>)</span></h4>
		</div>
		<div class="details">
			by
			<a href="//use.perl.org/~masak/">masak (6289)</a>
			
			
			<span class="otherdetails" id="comment_otherdetails_71578"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_71578"><p>Well yes, but not just that. I'm <em>using</em> the property of universality to bend a burgeoning language to my will. It's taking the general stance described in my blog post "<a href="http://use.perl.org/~masak/journal/38430" title="perl.org" rel="nofollow">Attitude</a> [perl.org]" (that most bugs or missing features have a workaround), and applying it to control flow.</p><p>Maybe the point I'm proving is mainly for myself, but if I can make GGE behave like PGE (only slower), I've shown something about the capabilities of Rakudo.</p></div>
		
	
	</div>
	<div class="commentSub" id="comment_sub_71578"></div>

</div>


<div id="replyto_71578"></div>

<ul id="group_71578">
	<li id="hiddens_71578" class="hide"></li>
</ul></li></ul></li>
			<li id="roothiddens" class="hide"></li>
		</ul>
	
	
	
	


<div id="replyto_0"></div>


<div id="discussion_buttons">


<span class="nbutton"><p><b><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_a" class="hide">Get More Comments</span></a></b></p></span>



<span class="nbutton"><p><b><a href="//use.perl.org/comments.pl?sid=44438&amp;op=reply&amp;threshold=0&amp;commentsort=0&amp;mode=thread" onclick="D2.replyTo(0); return false;">Reply</a></b></p></span>







</div>



	<script type="text/javascript">
<!--
		D2.currents()['hidden']   = 0;
		D2.currents()['full']     = 0;
		D2.currents()['oneline']  = 9;
		// D2.currents_total(9);

		D2.abbrev_comments({});
		D2.noshow_comments([]);
		D2.pieces_comments([71568,71570,71569,71571,71574,71579,71580,71572,71578]);
		D2.init_hiddens([]);

		D2.finishLoading();


		if (D2.thresh_totals()[6][6][1] == 0) {
			D2.replyTo(0, 1);
		}


//-->
	</script>

<!-- end template: ID 157, printCommComments;misc;default -->



<!-- start template: ID 112, footer;misc;default -->

</div>
                </div>
                <div id="footer">
			<div class="download">
                                <!-- START DOWNLOAD PERL -->
                                <!-- Perl Mongers, Inc.  web@perlmongers.org -->
                                <a href="http://www.cpan.org/ports/index.html"><img src="http://www.perl.org/Images/download_perl.gif" width="102" height="42" alt="Download Perl Now!"></a>
                                <!-- END DOWNLOAD PERL -->
                        </div>	
			<div class="sitelogo">
				<a href="//use.perl.org/">
					<img src="http://images.use.perl.org/topics/useperl.gif" alt="useperl">
				</a>
			</div>
                        <em>
				And don't tell me there isn't one bit of difference between null and space,<BR>
because that's exactly how much difference there is.&nbsp; :-)<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --Larry Wall in &lt;10209@jpl-devvax.JPL.NASA.GOV&gt;
			</em>
		</div>
		<div class="copyright">
			Stories, comments, journals, and other submissions on use Perl; are Copyright 1998-2006, their respective owners.
		</div>
		<div class="btmnav">
			<ul>
	<li class="begin">
		<a href="//use.perl.org/faq.shtml">FAQ</a>
	</li>
	<li>
		<a href="//use.perl.org/about.shtml">About</a>
        </li>
        <li>
		<a href="//use.perl.org/submit.pl">Submit Story</a>
        </li>
        <li>
		<a href="//use.perl.org/search.pl">Older Stories</a>
        </li>
        <li>	
		<a href="//use.perl.org/topics.shtml">Topics</a>
        </li>
        <li>
		<a href="//use.perl.org/pollBooth.pl">Polls</a>
        </li>
        <li>
		<a href="//use.perl.org/journal.pl">Journals</a>
        </li>
        <li>
		<a href="//use.perl.org/authors.pl">Authors</a>
        </li>
        <li>
		<a href="//use.perl.org/modulelist/">New Modules</a>
        </li>
        <li>
		<a href="//use.perl.org/users.pl?op=edithome">Preferences</a>

        </li>
</ul>
		</div>
        </div>
<div id="modal_cover" style="display:none" onclick="hide_modal_box()"></div>
<div id="modal_box" style="display:none">
        <div class="generaltitle" >
                <div class="title"><h3><span id="preference_title"></span> <a href="#" onclick="hide_modal_box(); return false"><img src="//images.use.perl.org/sic_close.png" alt="Close"></a></h3></div>
        </div>
        <div id="modal_box_content"></div>
</div>

	<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
	<script type="text/javascript">
		_uacct = "UA-32013-15";
		urchinTracker();
	</script>

</body>
</html>

<!-- end template: ID 112, footer;misc;default -->

